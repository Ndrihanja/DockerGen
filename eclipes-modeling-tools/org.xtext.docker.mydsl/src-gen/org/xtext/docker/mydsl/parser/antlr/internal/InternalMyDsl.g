/*
 * generated by Xtext 2.35.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.docker.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.docker.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.docker.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;

    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Compose";
   	}

   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleCompose
entryRuleCompose returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComposeRule()); }
	iv_ruleCompose=ruleCompose
	{ $current=$iv_ruleCompose.current; }
	EOF;

// Rule Compose
ruleCompose returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getComposeAccess().getComposeAction_0(),
					$current);
			}
		)
		otherlv_1='Compose'
		{
			newLeafNode(otherlv_1, grammarAccess.getComposeAccess().getComposeKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getComposeAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='version'
			{
				newLeafNode(otherlv_3, grammarAccess.getComposeAccess().getVersionKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getComposeAccess().getVersionEStringParserRuleCall_3_1_0());
					}
					lv_version_4_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getComposeRule());
						}
						set(
							$current,
							"version",
							lv_version_4_0,
							"org.xtext.docker.mydsl.MyDsl.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_5='service'
			{
				newLeafNode(otherlv_5, grammarAccess.getComposeAccess().getServiceKeyword_4_0());
			}
			otherlv_6='{'
			{
				newLeafNode(otherlv_6, grammarAccess.getComposeAccess().getLeftCurlyBracketKeyword_4_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getComposeAccess().getServiceServiceParserRuleCall_4_2_0());
					}
					lv_service_7_0=ruleService
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getComposeRule());
						}
						add(
							$current,
							"service",
							lv_service_7_0,
							"org.xtext.docker.mydsl.MyDsl.Service");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_8=','
				{
					newLeafNode(otherlv_8, grammarAccess.getComposeAccess().getCommaKeyword_4_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getComposeAccess().getServiceServiceParserRuleCall_4_3_1_0());
						}
						lv_service_9_0=ruleService
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getComposeRule());
							}
							add(
								$current,
								"service",
								lv_service_9_0,
								"org.xtext.docker.mydsl.MyDsl.Service");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_10='}'
			{
				newLeafNode(otherlv_10, grammarAccess.getComposeAccess().getRightCurlyBracketKeyword_4_4());
			}
		)?
		otherlv_11='}'
		{
			newLeafNode(otherlv_11, grammarAccess.getComposeAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleService
entryRuleService returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getServiceRule()); }
	iv_ruleService=ruleService
	{ $current=$iv_ruleService.current; }
	EOF;

// Rule Service
ruleService returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Service'
		{
			newLeafNode(otherlv_0, grammarAccess.getServiceAccess().getServiceKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getServiceAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getServiceRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"org.xtext.docker.mydsl.MyDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getServiceAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='command'
			{
				newLeafNode(otherlv_3, grammarAccess.getServiceAccess().getCommandKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getServiceAccess().getCommandEStringParserRuleCall_3_1_0());
					}
					lv_command_4_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getServiceRule());
						}
						set(
							$current,
							"command",
							lv_command_4_0,
							"org.xtext.docker.mydsl.MyDsl.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_5='depends_on'
			{
				newLeafNode(otherlv_5, grammarAccess.getServiceAccess().getDepends_onKeyword_4_0());
			}
			otherlv_6='('
			{
				newLeafNode(otherlv_6, grammarAccess.getServiceAccess().getLeftParenthesisKeyword_4_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getServiceRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getServiceAccess().getDepends_onServiceCrossReference_4_2_0());
					}
					ruleEString
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_8=','
				{
					newLeafNode(otherlv_8, grammarAccess.getServiceAccess().getCommaKeyword_4_3_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getServiceRule());
							}
						}
						{
							newCompositeNode(grammarAccess.getServiceAccess().getDepends_onServiceCrossReference_4_3_1_0());
						}
						ruleEString
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_10=')'
			{
				newLeafNode(otherlv_10, grammarAccess.getServiceAccess().getRightParenthesisKeyword_4_4());
			}
		)?
		otherlv_11='image'
		{
			newLeafNode(otherlv_11, grammarAccess.getServiceAccess().getImageKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getServiceAccess().getImageImageParserRuleCall_6_0());
				}
				lv_image_12_0=ruleImage
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getServiceRule());
					}
					set(
						$current,
						"image",
						lv_image_12_0,
						"org.xtext.docker.mydsl.MyDsl.Image");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_13='port'
			{
				newLeafNode(otherlv_13, grammarAccess.getServiceAccess().getPortKeyword_7_0());
			}
			otherlv_14='{'
			{
				newLeafNode(otherlv_14, grammarAccess.getServiceAccess().getLeftCurlyBracketKeyword_7_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getServiceAccess().getPortPortParserRuleCall_7_2_0());
					}
					lv_port_15_0=rulePort
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getServiceRule());
						}
						add(
							$current,
							"port",
							lv_port_15_0,
							"org.xtext.docker.mydsl.MyDsl.Port");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_16=','
				{
					newLeafNode(otherlv_16, grammarAccess.getServiceAccess().getCommaKeyword_7_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getServiceAccess().getPortPortParserRuleCall_7_3_1_0());
						}
						lv_port_17_0=rulePort
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getServiceRule());
							}
							add(
								$current,
								"port",
								lv_port_17_0,
								"org.xtext.docker.mydsl.MyDsl.Port");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_18='}'
			{
				newLeafNode(otherlv_18, grammarAccess.getServiceAccess().getRightCurlyBracketKeyword_7_4());
			}
		)?
		(
			otherlv_19='volume'
			{
				newLeafNode(otherlv_19, grammarAccess.getServiceAccess().getVolumeKeyword_8_0());
			}
			otherlv_20='{'
			{
				newLeafNode(otherlv_20, grammarAccess.getServiceAccess().getLeftCurlyBracketKeyword_8_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getServiceAccess().getVolumeVolumeParserRuleCall_8_2_0());
					}
					lv_volume_21_0=ruleVolume
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getServiceRule());
						}
						add(
							$current,
							"volume",
							lv_volume_21_0,
							"org.xtext.docker.mydsl.MyDsl.Volume");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_22=','
				{
					newLeafNode(otherlv_22, grammarAccess.getServiceAccess().getCommaKeyword_8_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getServiceAccess().getVolumeVolumeParserRuleCall_8_3_1_0());
						}
						lv_volume_23_0=ruleVolume
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getServiceRule());
							}
							add(
								$current,
								"volume",
								lv_volume_23_0,
								"org.xtext.docker.mydsl.MyDsl.Volume");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_24='}'
			{
				newLeafNode(otherlv_24, grammarAccess.getServiceAccess().getRightCurlyBracketKeyword_8_4());
			}
		)?
		(
			otherlv_25='network'
			{
				newLeafNode(otherlv_25, grammarAccess.getServiceAccess().getNetworkKeyword_9_0());
			}
			otherlv_26='{'
			{
				newLeafNode(otherlv_26, grammarAccess.getServiceAccess().getLeftCurlyBracketKeyword_9_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getServiceAccess().getNetworkNetworkParserRuleCall_9_2_0());
					}
					lv_network_27_0=ruleNetwork
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getServiceRule());
						}
						add(
							$current,
							"network",
							lv_network_27_0,
							"org.xtext.docker.mydsl.MyDsl.Network");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_28=','
				{
					newLeafNode(otherlv_28, grammarAccess.getServiceAccess().getCommaKeyword_9_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getServiceAccess().getNetworkNetworkParserRuleCall_9_3_1_0());
						}
						lv_network_29_0=ruleNetwork
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getServiceRule());
							}
							add(
								$current,
								"network",
								lv_network_29_0,
								"org.xtext.docker.mydsl.MyDsl.Network");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_30='}'
			{
				newLeafNode(otherlv_30, grammarAccess.getServiceAccess().getRightCurlyBracketKeyword_9_4());
			}
		)?
		(
			otherlv_31='environment'
			{
				newLeafNode(otherlv_31, grammarAccess.getServiceAccess().getEnvironmentKeyword_10_0());
			}
			otherlv_32='{'
			{
				newLeafNode(otherlv_32, grammarAccess.getServiceAccess().getLeftCurlyBracketKeyword_10_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getServiceAccess().getEnvironmentEnvironmentParserRuleCall_10_2_0());
					}
					lv_environment_33_0=ruleEnvironment
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getServiceRule());
						}
						add(
							$current,
							"environment",
							lv_environment_33_0,
							"org.xtext.docker.mydsl.MyDsl.Environment");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_34=','
				{
					newLeafNode(otherlv_34, grammarAccess.getServiceAccess().getCommaKeyword_10_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getServiceAccess().getEnvironmentEnvironmentParserRuleCall_10_3_1_0());
						}
						lv_environment_35_0=ruleEnvironment
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getServiceRule());
							}
							add(
								$current,
								"environment",
								lv_environment_35_0,
								"org.xtext.docker.mydsl.MyDsl.Environment");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_36='}'
			{
				newLeafNode(otherlv_36, grammarAccess.getServiceAccess().getRightCurlyBracketKeyword_10_4());
			}
		)?
		otherlv_37='}'
		{
			newLeafNode(otherlv_37, grammarAccess.getServiceAccess().getRightCurlyBracketKeyword_11());
		}
	)
;

// Entry rule entryRuleImage
entryRuleImage returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImageRule()); }
	iv_ruleImage=ruleImage
	{ $current=$iv_ruleImage.current; }
	EOF;

// Rule Image
ruleImage returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getImageAccess().getImageAction_0(),
					$current);
			}
		)
		otherlv_1='Image'
		{
			newLeafNode(otherlv_1, grammarAccess.getImageAccess().getImageKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getImageAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getImageRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.xtext.docker.mydsl.MyDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getImageAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			otherlv_4='tag'
			{
				newLeafNode(otherlv_4, grammarAccess.getImageAccess().getTagKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getImageAccess().getTagEStringParserRuleCall_4_1_0());
					}
					lv_tag_5_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getImageRule());
						}
						set(
							$current,
							"tag",
							lv_tag_5_0,
							"org.xtext.docker.mydsl.MyDsl.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getImageAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRulePort
entryRulePort returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPortRule()); }
	iv_rulePort=rulePort
	{ $current=$iv_rulePort.current; }
	EOF;

// Rule Port
rulePort returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPortAccess().getPortAction_0(),
					$current);
			}
		)
		otherlv_1='Port'
		{
			newLeafNode(otherlv_1, grammarAccess.getPortAccess().getPortKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getPortAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='number'
			{
				newLeafNode(otherlv_3, grammarAccess.getPortAccess().getNumberKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPortAccess().getNumberEIntParserRuleCall_3_1_0());
					}
					lv_number_4_0=ruleEInt
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPortRule());
						}
						set(
							$current,
							"number",
							lv_number_4_0,
							"org.xtext.docker.mydsl.MyDsl.EInt");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_5='protocol'
			{
				newLeafNode(otherlv_5, grammarAccess.getPortAccess().getProtocolKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPortAccess().getProtocolEStringParserRuleCall_4_1_0());
					}
					lv_protocol_6_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPortRule());
						}
						set(
							$current,
							"protocol",
							lv_protocol_6_0,
							"org.xtext.docker.mydsl.MyDsl.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getPortAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleVolume
entryRuleVolume returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVolumeRule()); }
	iv_ruleVolume=ruleVolume
	{ $current=$iv_ruleVolume.current; }
	EOF;

// Rule Volume
ruleVolume returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getVolumeAccess().getVolumeAction_0(),
					$current);
			}
		)
		otherlv_1='Volume'
		{
			newLeafNode(otherlv_1, grammarAccess.getVolumeAccess().getVolumeKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getVolumeAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='source'
			{
				newLeafNode(otherlv_3, grammarAccess.getVolumeAccess().getSourceKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVolumeAccess().getSourceEStringParserRuleCall_3_1_0());
					}
					lv_source_4_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVolumeRule());
						}
						set(
							$current,
							"source",
							lv_source_4_0,
							"org.xtext.docker.mydsl.MyDsl.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_5='target'
			{
				newLeafNode(otherlv_5, grammarAccess.getVolumeAccess().getTargetKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVolumeAccess().getTargetEStringParserRuleCall_4_1_0());
					}
					lv_target_6_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVolumeRule());
						}
						set(
							$current,
							"target",
							lv_target_6_0,
							"org.xtext.docker.mydsl.MyDsl.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getVolumeAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleNetwork
entryRuleNetwork returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNetworkRule()); }
	iv_ruleNetwork=ruleNetwork
	{ $current=$iv_ruleNetwork.current; }
	EOF;

// Rule Network
ruleNetwork returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getNetworkAccess().getNetworkAction_0(),
					$current);
			}
		)
		otherlv_1='Network'
		{
			newLeafNode(otherlv_1, grammarAccess.getNetworkAccess().getNetworkKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNetworkAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNetworkRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.xtext.docker.mydsl.MyDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getNetworkAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			otherlv_4='driver'
			{
				newLeafNode(otherlv_4, grammarAccess.getNetworkAccess().getDriverKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getNetworkAccess().getDriverEStringParserRuleCall_4_1_0());
					}
					lv_driver_5_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNetworkRule());
						}
						set(
							$current,
							"driver",
							lv_driver_5_0,
							"org.xtext.docker.mydsl.MyDsl.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getNetworkAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleEnvironment
entryRuleEnvironment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnvironmentRule()); }
	iv_ruleEnvironment=ruleEnvironment
	{ $current=$iv_ruleEnvironment.current; }
	EOF;

// Rule Environment
ruleEnvironment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getEnvironmentAccess().getEnvironmentAction_0(),
					$current);
			}
		)
		otherlv_1='Environment'
		{
			newLeafNode(otherlv_1, grammarAccess.getEnvironmentAccess().getEnvironmentKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEnvironmentAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEnvironmentRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.xtext.docker.mydsl.MyDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getEnvironmentAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			otherlv_4='value'
			{
				newLeafNode(otherlv_4, grammarAccess.getEnvironmentAccess().getValueKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getEnvironmentAccess().getValueEStringParserRuleCall_4_1_0());
					}
					lv_value_5_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEnvironmentRule());
						}
						set(
							$current,
							"value",
							lv_value_5_0,
							"org.xtext.docker.mydsl.MyDsl.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getEnvironmentAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEIntRule()); }
	iv_ruleEInt=ruleEInt
	{ $current=$iv_ruleEInt.current.getText(); }
	EOF;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
