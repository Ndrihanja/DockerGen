// automatically generated by Xtext
grammar org.xtext.docker.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

import "http://www.example.org/dockerCompose" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Compose returns Compose:
	{Compose}
	'Compose'
	'{'
		('version' version=EString)?
		('service' '{' service+=Service ( "," service+=Service)* '}' )?
	'}';







EString returns ecore::EString:
	STRING | ID;

Service returns Service:
	'Service'
	name=EString
	'{'
		('command' command=EString)?
		('depends_on' '(' depends_on+=[Service|EString] ( "," depends_on+=[Service|EString])* ')' )?
		'image' image=Image
		('port' '{' port+=Port ( "," port+=Port)* '}' )?
		('volume' '{' volume+=Volume ( "," volume+=Volume)* '}' )?
		('network' '{' network+=Network ( "," network+=Network)* '}' )?
		('environment' '{' environment+=Environment ( "," environment+=Environment)* '}' )?
	'}';

Image returns Image:
	{Image}
	'Image'
	name=EString
	'{'
		('tag' tag=EString)?
	'}';

Port returns Port:
	{Port}
	'Port'
	'{'
		('number' number=EInt)?
		('protocol' protocol=EString)?
	'}';

Volume returns Volume:
	{Volume}
	'Volume'
	'{'
		('source' source=EString)?
		('target' target=EString)?
	'}';

Network returns Network:
	{Network}
	'Network'
	name=EString
	'{'
		('driver' driver=EString)?
	'}';

Environment returns Environment:
	{Environment}
	'Environment'
	name=EString
	'{'
		('value' value=EString)?
	'}';

EInt returns ecore::EInt:
	'-'? INT;
