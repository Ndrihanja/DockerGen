/*
 * generated by Xtext 2.35.0
 */
package org.xtext.docker.mydsl.serializer;

import com.google.inject.Inject;
import dockerCompose.Compose;
import dockerCompose.DockerComposePackage;
import dockerCompose.Environment;
import dockerCompose.Image;
import dockerCompose.Network;
import dockerCompose.Port;
import dockerCompose.Service;
import dockerCompose.Volume;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.xtext.docker.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DockerComposePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DockerComposePackage.COMPOSE:
				sequence_Compose(context, (Compose) semanticObject); 
				return; 
			case DockerComposePackage.ENVIRONMENT:
				sequence_Environment(context, (Environment) semanticObject); 
				return; 
			case DockerComposePackage.IMAGE:
				sequence_Image(context, (Image) semanticObject); 
				return; 
			case DockerComposePackage.NETWORK:
				sequence_Network(context, (Network) semanticObject); 
				return; 
			case DockerComposePackage.PORT:
				sequence_Port(context, (Port) semanticObject); 
				return; 
			case DockerComposePackage.SERVICE:
				sequence_Service(context, (Service) semanticObject); 
				return; 
			case DockerComposePackage.VOLUME:
				sequence_Volume(context, (Volume) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Compose returns Compose
	 *
	 * Constraint:
	 *     (version=EString? (service+=Service service+=Service*)?)
	 * </pre>
	 */
	protected void sequence_Compose(ISerializationContext context, Compose semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Environment returns Environment
	 *
	 * Constraint:
	 *     (name=EString value=EString?)
	 * </pre>
	 */
	protected void sequence_Environment(ISerializationContext context, Environment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Image returns Image
	 *
	 * Constraint:
	 *     (name=EString tag=EString?)
	 * </pre>
	 */
	protected void sequence_Image(ISerializationContext context, Image semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Network returns Network
	 *
	 * Constraint:
	 *     (name=EString driver=EString?)
	 * </pre>
	 */
	protected void sequence_Network(ISerializationContext context, Network semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Port returns Port
	 *
	 * Constraint:
	 *     (number=EInt? protocol=EString?)
	 * </pre>
	 */
	protected void sequence_Port(ISerializationContext context, Port semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Service returns Service
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         command=EString? 
	 *         (depends_on+=[Service|EString] depends_on+=[Service|EString]*)? 
	 *         image=Image 
	 *         (port+=Port port+=Port*)? 
	 *         (volume+=Volume volume+=Volume*)? 
	 *         (network+=Network network+=Network*)? 
	 *         (environment+=Environment environment+=Environment*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_Service(ISerializationContext context, Service semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Volume returns Volume
	 *
	 * Constraint:
	 *     (source=EString? target=EString?)
	 * </pre>
	 */
	protected void sequence_Volume(ISerializationContext context, Volume semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
