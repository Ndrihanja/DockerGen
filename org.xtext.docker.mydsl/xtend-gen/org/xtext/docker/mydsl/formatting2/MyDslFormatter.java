/**
 * generated by Xtext 2.35.0
 */
package org.xtext.docker.mydsl.formatting2;

import com.google.inject.Inject;
import dockerCompose.Compose;
import dockerCompose.Environment;
import dockerCompose.Image;
import dockerCompose.Network;
import dockerCompose.Port;
import dockerCompose.Service;
import dockerCompose.Volume;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.xtext.docker.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private MyDslGrammarAccess _myDslGrammarAccess;

  protected void _format(final Compose compose, @Extension final IFormattableDocument document) {
    EList<Service> _service = compose.getService();
    for (final Service service : _service) {
      document.<Service>format(service);
    }
  }

  protected void _format(final Service service, @Extension final IFormattableDocument document) {
    document.<Image>format(service.getImage());
    EList<Port> _port = service.getPort();
    for (final Port port : _port) {
      document.<Port>format(port);
    }
    EList<Volume> _volume = service.getVolume();
    for (final Volume volume : _volume) {
      document.<Volume>format(volume);
    }
    EList<Network> _network = service.getNetwork();
    for (final Network network : _network) {
      document.<Network>format(network);
    }
    EList<Environment> _environment = service.getEnvironment();
    for (final Environment environment : _environment) {
      document.<Environment>format(environment);
    }
  }

  public void format(final Object compose, final IFormattableDocument document) {
    if (compose instanceof XtextResource) {
      _format((XtextResource)compose, document);
      return;
    } else if (compose instanceof Compose) {
      _format((Compose)compose, document);
      return;
    } else if (compose instanceof Service) {
      _format((Service)compose, document);
      return;
    } else if (compose instanceof EObject) {
      _format((EObject)compose, document);
      return;
    } else if (compose == null) {
      _format((Void)null, document);
      return;
    } else if (compose != null) {
      _format(compose, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(compose, document).toString());
    }
  }
}
